---
layout: post
title: Scene Manager and Menu Scene
date: 2018-02-02T13:30:00.000Z
author: Connor King
categories:
  - Blog
  - Low-Level Programming
  - Development
  - Birdman
img: bird.png
thumb: c_thumb.jpg
published: true
---

<b>Day 1</b>Making a scene manager and menu scene.<!--more-->

Instead of writing all the code in the one .cpp file I thought it would be better to make a system where it runs script from different .cpp files depending on the current scene, hence a scene manager. I made a new “scene.h” header file for the scene class and did all the scripting in children of this class. I created a new scene pointer in the game .cpp file which is initialised with the main menu but changes depending on the return value of the current scenes update function. The current scene is then updated and rendered from the game .cpp file. 

#### Scene Class
```C++
class Scene
{
public:
	Scene() = default;
	virtual ~Scene();

	virtual bool			init(ASGE::Renderer* renderer);
	virtual GameSceneEnums	update(const ASGE::GameTime& ms, ASGE::Renderer* renderer, int key, int action);
	virtual void			render(const ASGE::GameTime& ms, ASGE::Renderer* renderer);	
};
```

#### How Does it Work?
```C++
//init function game.cpp
current_scene = new MainMenu;
return current_scene->init(renderer.get());

//update function game.cpp
scene_enum = current_scene->update(ms, renderer.get(), key, action);

switch (scene_enum)
{
	case GameSceneEnums::MAIN_MENU:
		delete current_scene;
		current_scene = new MainMenu;
		current_scene->init(renderer.get());
		break;

	case GameSceneEnums::LEVEL_1:
		delete current_scene;
		current_scene = new Level1;
		current_scene->init(renderer.get());
		break;

	case GameSceneEnums::LEVEL_2:
		delete current_scene;
		current_scene = new Level2;
		current_scene->init(renderer.get());
		break;

	case GameSceneEnums::RANDOM_LEVEL:
		delete current_scene;
		current_scene = new RandomLevel;
		current_scene->init(renderer.get());
		break;

	case GameSceneEnums::EXIT:
		signalExit();
		break;
}

//render function game.cpp
current_scene->render(ms, renderer.get());
```

The game.cpp just runs the functions from other scenes and then switches when needed.