---
layout: post
title: Disconnecting and Re-Connecting
date: 2018-04-11T13:30:00.000Z
author: Connor King
categories:
  - Blog
  - Low-Level Programming
  - Development
  - Network
img: network.png
thumb: c_thumb.jpg
published: true
---

<b>Day 5 </b>Adding disconnect and re-connect features.<!--more-->

Added code to the server to send a special packet if a player closes the client mid-game. When received, the clients screen has a dark overlay with the words “Player Disconnected, Waiting for Player” and will be unable to make any actions. Once the other player re-connects, they receive the map seed and packets for each unit, updating their game to where they left off and the other players screen returns to normal.

#### Server Side
```C++
 on_disconnected = [&](unsigned int client_uid)
	{
		trace("on_client_disconnected");
		if (connected_clients == 2)
		{
			MyPacket packet(8);
			packet << 9999;
			packet << 1;
			server.send_packet_to_all_if(0,
				reinterpret_cast<const enet_uint8*>(packet.packet_data.data()),
				packet.packet_data.size(), ENET_PACKET_FLAG_RELIABLE,
				[&](const server_client& destination) {
				return destination.get_id() != client_uid;
			});
			trace("Game Paused");
		}
		connected_clients--;
		trace("Connected clients:" + std::to_string(connected_clients));
	};
	
	on_connected = [&](server_client& client)
	{
		trace("on_client_connected");
		connected_clients++;
		trace("Connected clients:" + std::to_string(connected_clients));
		if (connected_clients == 2)
		{
			if (game_started)
			{
				MyPacket packet(8);
				packet << 9999;
				packet << 2;
				server.send_packet_to_all_if(0,
					reinterpret_cast<const enet_uint8*>(packet.packet_data.data()),
					packet.packet_data.size(), ENET_PACKET_FLAG_RELIABLE,
					[&](const server_client& destination) {
					return destination.get_id() != client.get_id();
				});
				trace("Game Resumed");
			}
			else
			{
				game_started = true;
			}
		}
	};
```

#### Client Side
```C++
void Level1::gamePausePlay(int signal)
{
	switch (signal)
	{
	case 1:
		game_paused = true;
		break;
	case 2:
		sendPackets();
		game_paused = false;
		break;
	}
}
```
